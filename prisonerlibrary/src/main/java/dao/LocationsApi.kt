/**
 * Ascom Prisoner API
 * This is the Ascom REST Interface for Locations, Users, Persons and Appointments. You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alessandro.marra@ascom.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package dao

import com.ascom.prisonerlibrary.model.Location
import infastructure.*

class LocationsApi(
    basePath: kotlin.String = "https://labama.aw1.ch/Prison/api/v1",
    sessionId: String
) : ApiClient(basePath, sessionId) {

    /**
     * Get a Unit with their locations by the Unit Id
     *
     * @param unitId Id of the Unit
     * @param userId Id of the User (optional)
     * @return Unit
     */
    @Suppress("UNCHECKED_CAST")
    fun locationsByUnitIdUnitIdGet(unitId: kotlin.Int, userId: kotlin.Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("userId" to listOf("$userId"))
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/locations/byUnitId/{unitId}".replace("{" + "unitId" + "}", "$unitId"),
            query = localVariableQuery
        )
        val response = request<Unit>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * Get a location with their locations by the Location id
     *
     * @param locationId Id of the Location
     * @param userId Id of the User (optional)
     * @return Location
     */
    @Suppress("UNCHECKED_CAST")
    fun locationsLocationIdGet(locationId: kotlin.Int, userId: kotlin.Int? = null): Location {
        val localVariableQuery: MultiValueMap = mapOf("userId" to listOf("$userId"))
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/locations/{locationId}".replace("{" + "locationId" + "}", "$locationId"),
            query = localVariableQuery
        )
        val response = request<Location>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Location
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * Get all the units with their locations
     *
     * @param userId Id of the User (optional)
     * @return kotlin.Array<Unit>
     */
    @Suppress("UNCHECKED_CAST")
    fun locationsUnitsGet(userId: kotlin.Int? = null): kotlin.Array<Unit> {
        val localVariableQuery: MultiValueMap = mapOf("userId" to listOf("$userId"))
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/locations/units", query = localVariableQuery
        )
        val response = request<kotlin.Array<Unit>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Unit>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }
}
